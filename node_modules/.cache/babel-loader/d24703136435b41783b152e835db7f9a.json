{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport config from '../config';\n\nlet _timeoutId;\n\nconst _TEN_SECONDS_IN_MS = 10000;\nconst TokenService = {\n  saveAuthToken(token) {\n    window.localStorage.setItem(config.TOKEN_KEY, token);\n  },\n\n  getAuthToken() {\n    return window.localStorage.getItem(config.TOKEN_KEY);\n  },\n\n  clearAuthToken() {\n    window.localStorage.removeItem(config.TOKEN_KEY);\n  },\n\n  hasAuthToken() {\n    return !!TokenService.getAuthToken();\n  },\n\n  makeBasicAuthToken(userName, password) {\n    return window.btoa(\"\".concat(userName, \":\").concat(password));\n  },\n\n  parseJwt(jwt) {\n    return jwtDecode(jwt);\n  },\n\n  readJwtToken() {\n    return TokenService.parseJwt(TokenService.getAuthToken());\n  },\n\n  _getMsUntilExpiry(payload) {\n    /*\n      payload is from the JWT\n      the `exp` value is in seconds, need to convert to ms, so * 1000\n      calculates the difference between now and when the JWT will expire\n    */\n    return payload.exp * 1000 - Date.now();\n  },\n\n  queueCallbackBeforeExpiry(callback) {\n    /* get the number of ms from now until the token expires */\n    const msUntilExpiry = TokenService._getMsUntilExpiry(TokenService.readJwtToken());\n    /*\n      queue a callback that will happen 10 seconds before the token expires\n      the callback is passed in as an argument so could be anything,\n        in this app, the callback is for calling the refresh endpoint\n    */\n\n\n    _timeoutId = setTimeout(callback, msUntilExpiry - _TEN_SECONDS_IN_MS);\n  },\n\n  clearCallbackBeforeExpiry() {\n    clearTimeout(_timeoutId);\n  }\n\n};\nexport default TokenService;","map":{"version":3,"sources":["C:/Users/t73de/Desktop/the console/src/services/token-service.js"],"names":["jwtDecode","config","_timeoutId","_TEN_SECONDS_IN_MS","TokenService","saveAuthToken","token","window","localStorage","setItem","TOKEN_KEY","getAuthToken","getItem","clearAuthToken","removeItem","hasAuthToken","makeBasicAuthToken","userName","password","btoa","parseJwt","jwt","readJwtToken","_getMsUntilExpiry","payload","exp","Date","now","queueCallbackBeforeExpiry","callback","msUntilExpiry","setTimeout","clearCallbackBeforeExpiry","clearTimeout"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,IAAIC,UAAJ;;AACA,MAAMC,kBAAkB,GAAG,KAA3B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACnBC,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BR,MAAM,CAACS,SAAnC,EAA8CJ,KAA9C;AACD,GAHkB;;AAInBK,EAAAA,YAAY,GAAG;AACb,WAAOJ,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4BX,MAAM,CAACS,SAAnC,CAAP;AACD,GANkB;;AAOnBG,EAAAA,cAAc,GAAG;AACfN,IAAAA,MAAM,CAACC,YAAP,CAAoBM,UAApB,CAA+Bb,MAAM,CAACS,SAAtC;AACD,GATkB;;AAUnBK,EAAAA,YAAY,GAAG;AACb,WAAO,CAAC,CAACX,YAAY,CAACO,YAAb,EAAT;AACD,GAZkB;;AAanBK,EAAAA,kBAAkB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAOX,MAAM,CAACY,IAAP,WAAeF,QAAf,cAA2BC,QAA3B,EAAP;AACD,GAfkB;;AAgBnBE,EAAAA,QAAQ,CAACC,GAAD,EAAM;AACZ,WAAOrB,SAAS,CAACqB,GAAD,CAAhB;AACD,GAlBkB;;AAmBnBC,EAAAA,YAAY,GAAG;AACb,WAAOlB,YAAY,CAACgB,QAAb,CAAsBhB,YAAY,CAACO,YAAb,EAAtB,CAAP;AACD,GArBkB;;AAsBnBY,EAAAA,iBAAiB,CAACC,OAAD,EAAU;AACzB;;;;;AAKA,WAAQA,OAAO,CAACC,GAAR,GAAc,IAAf,GAAuBC,IAAI,CAACC,GAAL,EAA9B;AACD,GA7BkB;;AA8BnBC,EAAAA,yBAAyB,CAACC,QAAD,EAAW;AAClC;AACA,UAAMC,aAAa,GAAG1B,YAAY,CAACmB,iBAAb,CACpBnB,YAAY,CAACkB,YAAb,EADoB,CAAtB;AAGA;;;;;;;AAKApB,IAAAA,UAAU,GAAG6B,UAAU,CAACF,QAAD,EAAWC,aAAa,GAAG3B,kBAA3B,CAAvB;AACD,GAzCkB;;AA0CnB6B,EAAAA,yBAAyB,GAAG;AAC1BC,IAAAA,YAAY,CAAC/B,UAAD,CAAZ;AACD;;AA5CkB,CAArB;AA+CA,eAAeE,YAAf","sourcesContent":["import jwtDecode from 'jwt-decode'\nimport config from '../config'\n\nlet _timeoutId\nconst _TEN_SECONDS_IN_MS = 10000\n\nconst TokenService = {\n  saveAuthToken(token) {\n    window.localStorage.setItem(config.TOKEN_KEY, token)\n  },\n  getAuthToken() {\n    return window.localStorage.getItem(config.TOKEN_KEY)\n  },\n  clearAuthToken() {\n    window.localStorage.removeItem(config.TOKEN_KEY)\n  },\n  hasAuthToken() {\n    return !!TokenService.getAuthToken()\n  },\n  makeBasicAuthToken(userName, password) {\n    return window.btoa(`${userName}:${password}`)\n  },\n  parseJwt(jwt) {\n    return jwtDecode(jwt)\n  },\n  readJwtToken() {\n    return TokenService.parseJwt(TokenService.getAuthToken())\n  },\n  _getMsUntilExpiry(payload) {\n    /*\n      payload is from the JWT\n      the `exp` value is in seconds, need to convert to ms, so * 1000\n      calculates the difference between now and when the JWT will expire\n    */\n    return (payload.exp * 1000) - Date.now()\n  },\n  queueCallbackBeforeExpiry(callback) {\n    /* get the number of ms from now until the token expires */\n    const msUntilExpiry = TokenService._getMsUntilExpiry(\n      TokenService.readJwtToken()\n    )\n    /*\n      queue a callback that will happen 10 seconds before the token expires\n      the callback is passed in as an argument so could be anything,\n        in this app, the callback is for calling the refresh endpoint\n    */\n    _timeoutId = setTimeout(callback, msUntilExpiry - _TEN_SECONDS_IN_MS)\n  },\n  clearCallbackBeforeExpiry() {\n    clearTimeout(_timeoutId)\n  },\n}\n\nexport default TokenService\n"]},"metadata":{},"sourceType":"module"}