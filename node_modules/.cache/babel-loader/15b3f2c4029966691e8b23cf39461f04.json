{"ast":null,"code":"/*\n  Idle Service\n\n  this service manages when a user has gone idle (not interacting with the page).\n*/\nlet _timeoutId;\n\nlet _idleCallback = null;\nlet _notIdleEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];\n\nlet _FIVE_MINUTES_IN_MS = 5 * 60 * 1000;\n\nconst IdleService = {\n  setIdleCallback(idleCallback) {\n    _idleCallback = idleCallback;\n  },\n\n  resetIdleTimer(ev) {\n    clearTimeout(_timeoutId);\n    _timeoutId = setTimeout(_idleCallback, _FIVE_MINUTES_IN_MS);\n  },\n\n  regiserIdleTimerResets() {\n    _notIdleEvents.forEach(event => document.addEventListener(event, IdleService.resetIdleTimer, true));\n  },\n\n  unRegisterIdleResets() {\n    clearTimeout(_timeoutId);\n\n    _notIdleEvents.forEach(event => document.removeEventListener(event, IdleService.resetIdleTimer, true));\n  }\n\n};\nexport default IdleService;","map":{"version":3,"sources":["c:/Users/t73de/Desktop/the console/src/services/idle-service.js"],"names":["_timeoutId","_idleCallback","_notIdleEvents","_FIVE_MINUTES_IN_MS","IdleService","setIdleCallback","idleCallback","resetIdleTimer","ev","clearTimeout","setTimeout","regiserIdleTimerResets","forEach","event","document","addEventListener","unRegisterIdleResets","removeEventListener"],"mappings":"AACA;;;;;AAMA,IAAIA,UAAJ;;AACA,IAAIC,aAAa,GAAG,IAApB;AACA,IAAIC,cAAc,GAAG,CAAC,WAAD,EAAc,WAAd,EAA2B,UAA3B,EAAuC,QAAvC,EAAiD,YAAjD,CAArB;;AACA,IAAIC,mBAAmB,GAAG,IAAI,EAAJ,GAAS,IAAnC;;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,eAAe,CAACC,YAAD,EAAe;AAE5BL,IAAAA,aAAa,GAAGK,YAAhB;AACD,GAJiB;;AAMlBC,EAAAA,cAAc,CAACC,EAAD,EAAK;AACjBC,IAAAA,YAAY,CAACT,UAAD,CAAZ;AAEAA,IAAAA,UAAU,GAAGU,UAAU,CAACT,aAAD,EAAgBE,mBAAhB,CAAvB;AACD,GAViB;;AAWlBQ,EAAAA,sBAAsB,GAAG;AAEvBT,IAAAA,cAAc,CAACU,OAAf,CAAuBC,KAAK,IAC1BC,QAAQ,CAACC,gBAAT,CAA0BF,KAA1B,EAAiCT,WAAW,CAACG,cAA7C,EAA6D,IAA7D,CADF;AAGD,GAhBiB;;AAiBlBS,EAAAA,oBAAoB,GAAG;AAErBP,IAAAA,YAAY,CAACT,UAAD,CAAZ;;AACAE,IAAAA,cAAc,CAACU,OAAf,CAAuBC,KAAK,IAC1BC,QAAQ,CAACG,mBAAT,CAA6BJ,KAA7B,EAAoCT,WAAW,CAACG,cAAhD,EAAgE,IAAhE,CADF;AAGD;;AAvBiB,CAApB;AA0BA,eAAeH,WAAf","sourcesContent":["\n/*\n  Idle Service\n\n  this service manages when a user has gone idle (not interacting with the page).\n*/\n\nlet _timeoutId\nlet _idleCallback = null\nlet _notIdleEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart' ]\nlet _FIVE_MINUTES_IN_MS = 5 * 60 * 1000\n\nconst IdleService = {\n  setIdleCallback(idleCallback) {\n\n    _idleCallback = idleCallback\n  },\n\n  resetIdleTimer(ev) {\n    clearTimeout(_timeoutId)\n\n    _timeoutId = setTimeout(_idleCallback, _FIVE_MINUTES_IN_MS)\n  },\n  regiserIdleTimerResets() {\n    \n    _notIdleEvents.forEach(event =>\n      document.addEventListener(event, IdleService.resetIdleTimer, true)\n    )\n  },\n  unRegisterIdleResets() {\n    \n    clearTimeout(_timeoutId)\n    _notIdleEvents.forEach(event =>\n      document.removeEventListener(event, IdleService.resetIdleTimer, true)\n    )\n  },\n}\n\nexport default IdleService\n"]},"metadata":{},"sourceType":"module"}