{"ast":null,"code":"import TokenService from './token-service';\nimport IdleService from './idle-service';\nimport { API_BASE_URL } from '../config';\nconst UserService = {\n  postUser(user) {\n    return fetch(\"\".concat(API_BASE_URL, \"/users\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    }).then(res => !res.ok ? res.json().then(e => Promise.reject(e)) : res.json());\n  },\n\n  postLogin({\n    username,\n    password\n  }) {\n    return fetch(\"\".concat(API_BASE_URL, \"/auth/login\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    }).then(res => !res.ok ? res.json().then(e => Promise.reject(e)) : res.json()).then(res => {\n      TokenService.saveAuthToken(res.authToken);\n      IdleService.regiserIdleTimerResets();\n      TokenService.queueCallbackBeforeExpiry(() => {\n        UserService.postRefreshToken();\n      });\n      return res;\n    });\n  },\n\n  postRefreshToken() {\n    return fetch(\"\".concat(API_BASE_URL, \"/auth/refresh\"), {\n      method: 'POST',\n      headers: {\n        'authorization': \"Bearer \".concat(TokenService.getAuthToken())\n      }\n    }).then(res => !res.ok ? res.json().then(e => Promise.reject(e)) : res.json()).then(res => {\n      TokenService.saveAuthToken(res.authToken);\n      TokenService.queueCallbackBeforeExpiry(() => {\n        UserService.postRefreshToken();\n      });\n      return res;\n    }).catch(err => {\n      console.log('refresh token request error');\n      console.error(err);\n    });\n  }\n\n};\nexport default UserService;","map":{"version":3,"sources":["C:/Users/GRAPHICS/Desktop/Web-Dev-Toolkit/Web-Dev-Toolkit-Client/src/services/user-service.js"],"names":["TokenService","IdleService","API_BASE_URL","UserService","postUser","user","fetch","method","headers","body","JSON","stringify","then","res","ok","json","e","Promise","reject","postLogin","username","password","saveAuthToken","authToken","regiserIdleTimerResets","queueCallbackBeforeExpiry","postRefreshToken","getAuthToken","catch","err","console","log","error"],"mappings":"AACA,OAAOA,YAAP,MAAyB,iBAAzB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,YAAT,QAA6B,WAA7B;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,QAAQ,CAACC,IAAD,EAAO;AACb,WAAOC,KAAK,WAAIJ,YAAJ,aAA0B;AACpCK,MAAAA,MAAM,EAAE,MAD4B;AAEpCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF2B;AAKpCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AAL8B,KAA1B,CAAL,CAOJO,IAPI,CAOCC,GAAG,IACN,CAACA,GAAG,CAACC,EAAN,GACID,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgBI,CAAC,IAAIC,OAAO,CAACC,MAAR,CAAeF,CAAf,CAArB,CADJ,GAEIH,GAAG,CAACE,IAAJ,EAVD,CAAP;AAYD,GAdiB;;AAelBI,EAAAA,SAAS,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,EAAyB;AAChC,WAAOf,KAAK,WAAIJ,YAAJ,kBAA+B;AACzCK,MAAAA,MAAM,EAAE,MADiC;AAEzCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFgC;AAKzCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAES,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAAf;AALmC,KAA/B,CAAL,CAOJT,IAPI,CAOCC,GAAG,IACN,CAACA,GAAG,CAACC,EAAN,GACID,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgBI,CAAC,IAAIC,OAAO,CAACC,MAAR,CAAeF,CAAf,CAArB,CADJ,GAEIH,GAAG,CAACE,IAAJ,EAVD,EAYJH,IAZI,CAYCC,GAAG,IAAI;AACXb,MAAAA,YAAY,CAACsB,aAAb,CAA2BT,GAAG,CAACU,SAA/B;AACAtB,MAAAA,WAAW,CAACuB,sBAAZ;AACAxB,MAAAA,YAAY,CAACyB,yBAAb,CAAuC,MAAM;AAC3CtB,QAAAA,WAAW,CAACuB,gBAAZ;AACD,OAFD;AAGA,aAAOb,GAAP;AACD,KAnBI,CAAP;AAoBD,GApCiB;;AAqClBa,EAAAA,gBAAgB,GAAG;AACjB,WAAOpB,KAAK,WAAIJ,YAAJ,oBAAiC;AAC3CK,MAAAA,MAAM,EAAE,MADmC;AAE3CC,MAAAA,OAAO,EAAE;AACP,0CAA2BR,YAAY,CAAC2B,YAAb,EAA3B;AADO;AAFkC,KAAjC,CAAL,CAMJf,IANI,CAMCC,GAAG,IACN,CAACA,GAAG,CAACC,EAAN,GACID,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgBI,CAAC,IAAIC,OAAO,CAACC,MAAR,CAAeF,CAAf,CAArB,CADJ,GAEIH,GAAG,CAACE,IAAJ,EATD,EAWJH,IAXI,CAWCC,GAAG,IAAI;AACXb,MAAAA,YAAY,CAACsB,aAAb,CAA2BT,GAAG,CAACU,SAA/B;AACAvB,MAAAA,YAAY,CAACyB,yBAAb,CAAuC,MAAM;AAC3CtB,QAAAA,WAAW,CAACuB,gBAAZ;AACD,OAFD;AAGA,aAAOb,GAAP;AACD,KAjBI,EAkBJe,KAlBI,CAkBEC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAD,MAAAA,OAAO,CAACE,KAAR,CAAcH,GAAd;AACD,KArBI,CAAP;AAsBD;;AA5DiB,CAApB;AA+DA,eAAe1B,WAAf","sourcesContent":["\r\nimport TokenService from './token-service'\r\nimport IdleService from './idle-service'\r\nimport { API_BASE_URL } from '../config'\r\n\r\nconst UserService = {\r\n  postUser(user) {\r\n    return fetch(`${API_BASE_URL}/users`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(user),\r\n    })\r\n      .then(res =>\r\n        (!res.ok)\r\n          ? res.json().then(e => Promise.reject(e))\r\n          : res.json()\r\n      )\r\n  },\r\n  postLogin({ username, password }) {\r\n    return fetch(`${API_BASE_URL}/auth/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ username, password }),\r\n    })\r\n      .then(res =>\r\n        (!res.ok)\r\n          ? res.json().then(e => Promise.reject(e))\r\n          : res.json()\r\n      )\r\n      .then(res => {\r\n        TokenService.saveAuthToken(res.authToken)\r\n        IdleService.regiserIdleTimerResets()\r\n        TokenService.queueCallbackBeforeExpiry(() => {\r\n          UserService.postRefreshToken()\r\n        })\r\n        return res\r\n      })\r\n  },\r\n  postRefreshToken() {\r\n    return fetch(`${API_BASE_URL}/auth/refresh`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'authorization': `Bearer ${TokenService.getAuthToken()}`,\r\n      },\r\n    })\r\n      .then(res =>\r\n        (!res.ok)\r\n          ? res.json().then(e => Promise.reject(e))\r\n          : res.json()\r\n      )\r\n      .then(res => {\r\n        TokenService.saveAuthToken(res.authToken)\r\n        TokenService.queueCallbackBeforeExpiry(() => {\r\n          UserService.postRefreshToken()\r\n        })\r\n        return res\r\n      })\r\n      .catch(err => {\r\n        console.log('refresh token request error')\r\n        console.error(err)\r\n      })\r\n  },\r\n}\r\n\r\nexport default UserService\r\n"]},"metadata":{},"sourceType":"module"}