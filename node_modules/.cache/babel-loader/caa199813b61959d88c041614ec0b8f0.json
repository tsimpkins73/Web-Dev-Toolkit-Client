{"ast":null,"code":"var _jsxFileName = \"c:\\\\Users\\\\t73de\\\\Desktop\\\\Web-Dev-Toolkit-Client\\\\src\\\\ResourceTypePage.js\";\nimport React from 'react';\nimport './css/ResourceTypeView.css';\nimport ResourceTypeView from \"./ResourceTypeView.js\";\nimport { Link } from 'react-router-dom';\nimport { API_BASE_URL } from './config';\nexport default class ResourceTypePreview extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.getResourcesForTypes = typeID => {\n      fetch(\"\".concat(API_BASE_URL, \"/resources/byType/\").concat(typeID)).then(response => response.json()).then(typeResources => {\n        this.setState({\n          typeResources\n        });\n      });\n    };\n\n    this.state = {\n      typeResources: [],\n      resourceType: {}\n    };\n  }\n\n  componentDidMount() {\n    let resourceType = this.props.resourceType;\n    console.log(resourceType);\n\n    if (this.props.favoriteResources) {\n      this.setState({\n        typeResources: this.props.favoriteResources,\n        resourceType: \"Favorites\"\n      });\n    }\n\n    if (this.props.searchTerm) {\n      this.setState({\n        typeResources: this.props.searchResources,\n        resourceType: \"Results\"\n      });\n    } else {\n      this.getResourcesForTypes(resourceType.id);\n      this.setState({\n        resourceType: this.props.resourceType\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    /*        this.props.clearSpecialResources(); */\n  }\n\n  componentWillReceiveProps(newProps) {\n    if (newProps.favoriteResources) {\n      this.setState({\n        typeResources: this.props.favoriteResources\n      });\n    } else if (newProps.searchResources) {\n      if (newProps.searchResources !== this.state.typeResources) {\n        this.setState({\n          typeResources: newProps.searchResources\n        });\n      } else {\n        this.setState({\n          typeResources: this.props.searchResources\n        });\n      }\n    } else if (newProps.resourceType !== this.props.resourceType) {\n      this.getResourcesForTypes(newProps.resourceType.id);\n    } else if (this.props.resourceType) {\n      this.getResourcesForTypes(this.props.resourceType.id);\n    } else {\n      this.setState({\n        typeResources: []\n      });\n    }\n  }\n\n  render(props) {\n    let resourceType = this.state.resourceType;\n    let typeResources = this.state.typeResources;\n    console.log(resourceType);\n    console.log(typeResources);\n    return React.createElement(\"section\", {\n      id: \"resource-full-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      class: \"resource-section-headline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, resourceType), React.createElement(\"section\", {\n      id: \"resource-component-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, typeResources.map(function (resource) {\n      return React.createElement(ResourceTypeView, {\n        resource: resource,\n        resourceType: resourceType,\n        handleFavoriteButton: () => this.props.handleFavoriteButton(resource),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      });\n    })));\n  }\n\n}","map":{"version":3,"sources":["c:/Users/t73de/Desktop/Web-Dev-Toolkit-Client/src/ResourceTypePage.js"],"names":["React","ResourceTypeView","Link","API_BASE_URL","ResourceTypePreview","Component","constructor","props","context","getResourcesForTypes","typeID","fetch","then","response","json","typeResources","setState","state","resourceType","componentDidMount","console","log","favoriteResources","searchTerm","searchResources","id","componentWillUnmount","componentWillReceiveProps","newProps","render","map","resource","handleFavoriteButton"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport './css/ResourceTypeView.css'\r\nimport ResourceTypeView from \"./ResourceTypeView.js\";\r\nimport { Link } from 'react-router-dom';\r\nimport { API_BASE_URL } from './config'\r\n\r\nexport default class ResourceTypePreview extends React.Component {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this.state = {\r\n            typeResources: [],\r\n            resourceType:{}\r\n        };\r\n    }\r\n\r\n\r\n    getResourcesForTypes = (typeID) => {\r\n        fetch(`${API_BASE_URL}/resources/byType/${typeID}`)\r\n            .then(response => response.json())\r\n            .then((typeResources) => { this.setState({ typeResources }); });\r\n    }\r\n\r\n    componentDidMount() {\r\n        let resourceType = this.props.resourceType;\r\n        console.log(resourceType)\r\n        if (this.props.favoriteResources) {\r\n            this.setState({ typeResources: this.props.favoriteResources,\r\n            resourceType:\"Favorites\" })\r\n        }\r\n        if (this.props.searchTerm) {\r\n            this.setState({ typeResources: this.props.searchResources,\r\n            resourceType:\"Results\"})\r\n        }\r\n        else {\r\n            this.getResourcesForTypes(resourceType.id);\r\n            this.setState({ resourceType: this.props.resourceType })\r\n        }\r\n    };\r\n\r\n    componentWillUnmount() {\r\n /*        this.props.clearSpecialResources(); */\r\n    }\r\n\r\n    componentWillReceiveProps(newProps) {\r\n       \r\n        if(newProps.favoriteResources){\r\n            this.setState({ typeResources: this.props.favoriteResources })\r\n        }else if(newProps.searchResources) {\r\n            if(newProps.searchResources !== this.state.typeResources) {\r\n                this.setState({ typeResources: newProps.searchResources })\r\n            }\r\n            else{\r\n            this.setState({ typeResources: this.props.searchResources })\r\n        }\r\n    }\r\n        else if(newProps.resourceType !== this.props.resourceType){\r\n            this.getResourcesForTypes(newProps.resourceType.id);\r\n        }else if(this.props.resourceType){\r\n            this.getResourcesForTypes(this.props.resourceType.id);\r\n        }\r\n        else{\r\n            this.setState({ typeResources: []})\r\n        }\r\n\r\n    }\r\n\r\n    render(props) {\r\n        let resourceType = this.state.resourceType;\r\n        let typeResources = this.state.typeResources;\r\n        console.log(resourceType)\r\n        console.log(typeResources)\r\n        return (\r\n            <section id=\"resource-full-container\">\r\n                <h1 class=\"resource-section-headline\">{resourceType}</h1>\r\n                <section id=\"resource-component-container\">\r\n                    {typeResources.map(function (resource) {\r\n                        return <ResourceTypeView resource={resource}  resourceType={resourceType} handleFavoriteButton={() => this.props.handleFavoriteButton(resource)} />;\r\n                    })}\r\n                </section>\r\n            </section>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}