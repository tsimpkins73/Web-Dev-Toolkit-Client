{"ast":null,"code":"/*\r\n  Idle Service\r\n\r\n  this service manages when a user has gone idle (not interacting with the page).\r\n*/var _timeoutId;var _idleCallback=null;var _notIdleEvents=['mousedown','mousemove','keypress','scroll','touchstart'];var _FIVE_MINUTES_IN_MS=5*60*1000;var IdleService={setIdleCallback:function setIdleCallback(idleCallback){_idleCallback=idleCallback;},resetIdleTimer:function resetIdleTimer(ev){clearTimeout(_timeoutId);_timeoutId=setTimeout(_idleCallback,_FIVE_MINUTES_IN_MS);},regiserIdleTimerResets:function regiserIdleTimerResets(){_notIdleEvents.forEach(function(event){return document.addEventListener(event,IdleService.resetIdleTimer,true);});},unRegisterIdleResets:function unRegisterIdleResets(){clearTimeout(_timeoutId);_notIdleEvents.forEach(function(event){return document.removeEventListener(event,IdleService.resetIdleTimer,true);});}};export default IdleService;","map":{"version":3,"sources":["c:/Users/t73de/Desktop/Web-Dev-Toolkit-Client/src/services/idle-service.js"],"names":["_timeoutId","_idleCallback","_notIdleEvents","_FIVE_MINUTES_IN_MS","IdleService","setIdleCallback","idleCallback","resetIdleTimer","ev","clearTimeout","setTimeout","regiserIdleTimerResets","forEach","event","document","addEventListener","unRegisterIdleResets","removeEventListener"],"mappings":"AACA;;;;EAMA,GAAIA,CAAAA,UAAJ,CACA,GAAIC,CAAAA,aAAa,CAAG,IAApB,CACA,GAAIC,CAAAA,cAAc,CAAG,CAAC,WAAD,CAAc,WAAd,CAA2B,UAA3B,CAAuC,QAAvC,CAAiD,YAAjD,CAArB,CACA,GAAIC,CAAAA,mBAAmB,CAAG,EAAI,EAAJ,CAAS,IAAnC,CAEA,GAAMC,CAAAA,WAAW,CAAG,CAClBC,eADkB,0BACFC,YADE,CACY,CAE5BL,aAAa,CAAGK,YAAhB,CACD,CAJiB,CAMlBC,cANkB,yBAMHC,EANG,CAMC,CACjBC,YAAY,CAACT,UAAD,CAAZ,CAEAA,UAAU,CAAGU,UAAU,CAACT,aAAD,CAAgBE,mBAAhB,CAAvB,CACD,CAViB,CAWlBQ,sBAXkB,kCAWO,CAEvBT,cAAc,CAACU,OAAf,CAAuB,SAAAC,KAAK,QAC1BC,CAAAA,QAAQ,CAACC,gBAAT,CAA0BF,KAA1B,CAAiCT,WAAW,CAACG,cAA7C,CAA6D,IAA7D,CAD0B,EAA5B,EAGD,CAhBiB,CAiBlBS,oBAjBkB,gCAiBK,CAErBP,YAAY,CAACT,UAAD,CAAZ,CACAE,cAAc,CAACU,OAAf,CAAuB,SAAAC,KAAK,QAC1BC,CAAAA,QAAQ,CAACG,mBAAT,CAA6BJ,KAA7B,CAAoCT,WAAW,CAACG,cAAhD,CAAgE,IAAhE,CAD0B,EAA5B,EAGD,CAvBiB,CAApB,CA0BA,cAAeH,CAAAA,WAAf","sourcesContent":["\r\n/*\r\n  Idle Service\r\n\r\n  this service manages when a user has gone idle (not interacting with the page).\r\n*/\r\n\r\nlet _timeoutId\r\nlet _idleCallback = null\r\nlet _notIdleEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart' ]\r\nlet _FIVE_MINUTES_IN_MS = 5 * 60 * 1000\r\n\r\nconst IdleService = {\r\n  setIdleCallback(idleCallback) {\r\n\r\n    _idleCallback = idleCallback\r\n  },\r\n\r\n  resetIdleTimer(ev) {\r\n    clearTimeout(_timeoutId)\r\n\r\n    _timeoutId = setTimeout(_idleCallback, _FIVE_MINUTES_IN_MS)\r\n  },\r\n  regiserIdleTimerResets() {\r\n    \r\n    _notIdleEvents.forEach(event =>\r\n      document.addEventListener(event, IdleService.resetIdleTimer, true)\r\n    )\r\n  },\r\n  unRegisterIdleResets() {\r\n    \r\n    clearTimeout(_timeoutId)\r\n    _notIdleEvents.forEach(event =>\r\n      document.removeEventListener(event, IdleService.resetIdleTimer, true)\r\n    )\r\n  },\r\n}\r\n\r\nexport default IdleService\r\n"]},"metadata":{},"sourceType":"module"}